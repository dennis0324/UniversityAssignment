구성:

추상 클래스: 
    - 추상 메소드와 일반 메소드 모두 포함
    - 상수, 변수 필드 모두 포함

인페이스:
    - 변수 필드(멤버 변수)는 포함하지 않음
    - 상수, 추상 메소드, 일반 메솓, default 메소드, static 메소드 모두 포함
    - default 메소드, static 메소드 모두 포함
    - protected 접근 지정 선언 불가
    - 다중 상속 지원


목적:
추상 클래스: 추상 클래스는 서브 클래스에서 필요로 하는  대부분의 기능을 구현하여 두고 서브 클래스가 상속받아 활용할 수 있도록 하되, 
서브 클래스에서 구현할 수 밖에 없는 기능만을 추상 메소드로 선언하여, 서브 클래스에서 구현하도록 하는 목적

인터페이스: 인터페이스는 객체의 기능을 모두 공개한 표준화 문서와 같은 것으로, 
개발자에게 인터페이스를 상속받는 클래스의 목적에 따라 인터페이스의 모든 추상 메소드를 만들도록 하는 목적


나의 개인적인 차이:
    추상 클래스의 의미는 is(~이다.)라고 해석하는게 맞는거 같고,인터페이스의 의미는 is able to(~할 수 있다)라는
    표현이 맞는 것 같습니다. 따라서 부모와 자식이 같이 가지고 있는 메소드를 자식에서 구현할 때 부모 클래스에서 미리 
    자식에 사용될 메소드의 구조를 명확히 함에 있습니다. 하지만 인터페이스같은 경우 자식과 부모의 관계가 아닌 서로 다른 조상을
    가지고 있는 상황에서의 같은 행동이라고 했을 때의 동작 자체를 명확하게 만듦에 있다고 생각합니다.
